{"version":3,"sources":["components/Header.js","components/Footer.js","layouts/PageLayout.js","components/Three.js","containers/Home.js","Main.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","Footer","PageLayout","components_Header","this","props","children","components_Footer","Component","Three","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","width","window","innerWidth","height","innerHeight","_this2","ref","el","three","updateDimensions","addEventListener","bind","scene","THREE","camera","renderer","antialias","setSize","appendChild","domElement","mesh","group","i","geometry","material","color","position","set","add","z","animate","requestAnimationFrame","rotation","y","render","setState","setClearColor","aspect","updateProjectionMatrix","removeEventListener","React","Home","layouts_PageLayout","Three_Three","Main","react_router_dom","basename","react_router","exact","path","component","App","src_Main","Boolean","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6e976b0b.chunk.js","sourcesContent":["import React from 'react';\n\nconst Header = () => (\n  <header className=\"site-header\">\n  </header>\n);\n\nexport default Header;","import React from 'react';\n\nconst Footer = () => (\n  <footer className=\"site-footer\">\n  </footer>\n);\n\nexport default Footer;","import React, {Component} from 'react';\nimport Header from '../components/Header';\nimport Footer from '../components/Footer';\n\nclass PageLayout extends Component {\n  render() {\n    return (\n      <div>\n        <Header/>\n        <main>\n          {this.props.children}\n        </main>\n        <Footer/>\n      </div>\n    );\n  }\n}\n\nexport default PageLayout;","import React from 'react';\nimport * as THREE from 'three';\n\nexport default class Three extends React.Component {\n\n  /**\n   * Constructor\n   */\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      width: window.innerWidth,\n      height: window.innerHeight\n    }\n  }\n\n  /**\n   * Rendering\n   */\n  render() {\n    return (\n      <div className='three' ref={(el) => { this.three = el }}></div>\n    );\n  }\n\n  /**\n   * Initialization\n   */\n  componentDidMount() {\n    this.updateDimensions();\n    //// ページの読み込みを待つ\n    window.addEventListener(\"resize\", this.updateDimensions.bind(this));\n    // シーンを作成\n    this.scene = new THREE.Scene();\n    // カメラを作成\n    this.camera = new THREE.PerspectiveCamera(100, window.innerWidth / window.innerHeight, 0.1, 1000);\n    //3D表示用のJavaScriptを用意\n    this.renderer = new THREE.WebGLRenderer({ antialias: true });\n    this.renderer.setSize(window.innerWidth, window.innerHeight);\n    this.three.appendChild(this.renderer.domElement);\n    //ライトを作成\n    //環境光源を作成\n    //// new THREE.AmbientLight(色, 光の強さ)\n    // this.ambientLight = new THREE.AmbientLight(0xFFFFFF, 1.0);\n    // this.scene.add(this.ambientLight);\n    //平行光源\n    // this.directionalLight = new THREE.DirectionalLight(0x9090aa);\n    // this.directionalLight.position.set(-10, 10, -10).normalize();\n    // this.scene.add(this.directionalLight);\n    //半球光源\n    // this.hemisphereLight = new THREE.HemisphereLight(0xffffff, 0x444444);\n    // this.hemisphereLight.position.set(1, 1, 1);\n    // this.scene.add(this.hemisphereLight);\n    // 点光源を作成\n    // new THREE.PointLight(色, 光の強さ, 距離, 光の減衰率)\n    // this.pointLight = new THREE.PointLight(0xFFFFFF, 2, 10, 1.0);\n    // this.scene.add(this.pointLight);\n    // ポイントライト\n    // this.pointLight = new THREE.PointLight(0xFFFFFF, 2, 50, 1.0);\n    // this.scene.add(this.pointLight);\n    //スポットライト\n    // new THREE.SpotLight(色, 光の強さ, 距離, 照射角, ボケ具合, 減衰率)\n    // this.spotlight = new THREE.SpotLight(0xFFFFFF, -100, 120, Math.PI / 10, 10, 0.5);\n    // this.scene.add(this.spotlight);\n    //スポットライトヘルパー\n    // this.lightHelper = new THREE.SpotLightHelper(this.spotlight);\n    // this.scene.add(this.lightHelper);\n\n    //立方体を作る\n    // this.geometry = new THREE.BoxGeometry(1, 1, 1);\n    // this.material = new THREE.MeshStandardMaterial({ color: 0x00ff00, metalness: 0.15 });\n    // this.cube = new THREE.Mesh(this.geometry, this.material);\n    // this.scene.add(this.cube);\n\n    // ドーナツを作成\n    this.mesh = new THREE.Mesh();\n    this.group = new THREE.Object3D();\n  for(var i = 0; i < 10; i++){\n    //// 芯円半径50、断面円半径10、断面円分割3、芯円分割16\n    // this.geometry = new THREE.TorusGeometry(10, 2, 64, 100);\n    var geometry = new THREE.TorusGeometry(8, 2, 64, 100);\n    // マテリアルを作成\n    // this.material = new THREE.MeshBasicMaterial({color: 0x6600FF});\n    var material = new THREE.MeshBasicMaterial({color: 0x6600FF});\n    // メッシュを作成\n    // this.mesh = new THREE.Mesh(this.geometry, this.material);\n    this.mesh[i] = new THREE.Mesh(geometry, material);\n    this.mesh[i].position.set(-60+i*10,-60+i*10,i*20);\n    this.group.add( this.mesh[i] );\n    this.scene.add(this.group);\n\n\n    // 3D空間にメッシュを追加\n    // this.scene.add(this.mesh);\n    //ポジションセット\n    // this.mesh.position.set(0,0,0+i);\n  }\n\n    this.camera.position.z = 200;\n    this.animate();\n  }\n\n  /**\n   * Animation loop\n   */\n  animate() {\n    requestAnimationFrame(this.animate.bind(this));\n    for(var i = 0; i < 10; i++){\n    // this.mesh[i].rotation.x += 0.03;\n    this.mesh[i].rotation.y += 0.03;\n    }\n    this.renderer.render(this.scene, this.camera);\n  }\n\n  /**\n   * Resize operation handler, updating dimensions.\n   * Setting state will invalidate the component\n   * and call `componentWillUpdate()`.\n   */\n  updateDimensions() {\n    this.setState({\n      width: window.innerWidth,\n      height: window.innerHeight\n    });\n  }\n\n  /**\n   * Invalidation handler, updating layout\n   */\n  componentWillUpdate() {\n    let width = window.innerWidth;\n    let height = window.innerHeight;\n\n    this.renderer.setSize(width, height);\n    this.renderer.setClearColor(0xf8f8f8);\n    this.camera.aspect = width / height;\n    this.camera.updateProjectionMatrix();\n  }\n\n  /**\n   * Dispose\n   */\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.updateDimensions.bind(this));\n  }\n\n}\n","import React from 'react';\nimport PageLayout from '../layouts/PageLayout';\nimport Three from '../components/Three';\nimport './Home.scss';\n\nconst Home = () => (\n  <PageLayout>\n    <h1 className='site-title'>Natsuko Sunaga's portfolio</h1>\n    <h3 className='site-sub'>Recently I am interested in Three.js</h3>\n    <Three />\n  </PageLayout>\n);\n\nexport default Home;","import React from 'react';\nimport {BrowserRouter, Switch, Route} from 'react-router-dom';\nimport Home from './containers/Home';\n\nconst Main = () => (\n  <BrowserRouter basename=\"/threejs-react-example\">\n    <Switch>\n      <Route exact path='/' component={Home}></Route>\n    </Switch>\n  </BrowserRouter>\n);\n\nexport default Main;","import React from 'react';\nimport Main from './Main';\nimport './App.css';\n\nconst App = () => (\n  <div className='app'>\n    <Main />\n  </div>\n);\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}